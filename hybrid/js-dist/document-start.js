function __extends(d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __metadata(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
}

function send(msg) {
    if (typeof msg.arguments === "object") {
        msg.arguments = JSON.stringify(msg.arguments);
    }
    window.webkit.messageHandlers.hybrid.postMessage(msg);
}
// WebKit messageHandlers don't actually allow a response, so instead
// we store an array of callback functions, which we then call in-app
// with a window._hybridCallback call. 
var callbackArray = [];
function sendAndReceive(msg) {
    var callbackIndex = 0;
    while (callbackArray[callbackIndex]) {
        callbackIndex++;
    }
    return new Promise(function (fulfill, reject) {
        callbackArray[callbackIndex] = function (err, resp) {
            callbackArray[callbackIndex] = null;
            if (err) {
                return reject(err);
            }
            else {
                return fulfill(resp);
            }
        };
        msg._callbackIndex = callbackIndex;
        send(msg);
    });
}
;
window._hybridCallback = function (callbackIndex, err, resp) {
    console.log('idx', callbackIndex);
    callbackArray[callbackIndex](err, resp);
};

var makeSuitable = function (val) {
    if (val instanceof Error) {
        return val.toString();
    }
    else {
        return JSON.stringify(val);
    }
};
if (!console._hybridHooked) {
    var levels = ['info', 'log', 'error'];
    levels.forEach(function (level) {
        var original = console[level];
        console[level] = function () {
            // Still output to web console in case we have Safari debugger attached.
            if (original) {
                original.apply(console, arguments);
            }
            // Array.from because otherwise it transforms to an object like {"0": "", "1": ""}
            var argsAsJSON = Array.from(arguments).map(makeSuitable);
            send({
                command: 'console',
                arguments: {
                    level: level,
                    text: argsAsJSON.join(",")
                }
            });
        };
    });
    // send errors to XCode debug
    if (window) {
        window.onerror = function (message, file, line, col, error) {
            console.error(arguments);
        };
    }
    console._hybridHooked = true;
}

navigator.serviceWorker = {
    register: function (swPath, opts) {
        if ( opts === void 0 ) opts = {};

        var pathToSW = window.location.origin + resolve(window.location.pathname, swPath);
        console.info("Attempting to register service worker at", pathToSW);
        return sendAndReceive({
            command: "navigator.serviceWorker.register",
            arguments: {
                path: swPath,
                options: opts
            }
        })
            .then(function (response) {
            console.log("done?", response);
        });
        // fetch("http://localhost:" + HANDLER_PORT + "/sw/register", {
        //     method: "POST",
        //     body: JSON.stringify({
        //         url: pathToSW,
        //         scope: opts.scope
        //     })
        // })
        // .then((res) => res.json())
        // .then(function(json) {
        //       console.log("done?", json);
        // })
        // .catch((err) => {
        //     console.error(err, err.stack)
        // })
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,